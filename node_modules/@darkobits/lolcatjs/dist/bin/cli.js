#!/usr/bin/env node
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _yargs = _interopRequireDefault(require("yargs"));

var _makinUrText = _interopRequireDefault(require("../lib/makin-ur-text"));

var _constantz = require("../etc/constantz");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const argzParser = _yargs.default.usage(['$0 [OPTION]... [FILE]...\n\n', 'Concatenate FILE(s) or standard input to standard output.\n', 'With no FILE, or when FILE is "-", read standard input.'].join('')).example('$0 foo - bar', 'Output foo\'s contents, then stdin, then, bar\'s contents.').example('$0', 'Copy stdin to stdout.').example('cowsay "Sindre is a horse" | lolcatjs', 'Because why not.').option('force', {
  description: 'Force color even when stdout is not a TTY.',
  alias: 'f'
}).option('spread', {
  description: 'Rainbow spread.',
  alias: 'p',
  default: _constantz.TEH_DEFAULT_OPSHUNZ.spread
}).option('freq', {
  description: 'Rainbow frequency.',
  alias: 'F',
  default: _constantz.TEH_DEFAULT_OPSHUNZ.freq
}).option('seed', {
  description: 'Rainbow seed; 0 = random.',
  alias: 'S',
  default: _constantz.TEH_DEFAULT_OPSHUNZ.seed
}).option('animate', {
  description: 'Enable psychedelics.',
  alias: 'a',
  default: _constantz.TEH_DEFAULT_OPSHUNZ.animate
}).option('speed', {
  description: 'Animation speed.',
  alias: 's',
  default: _constantz.TEH_DEFAULT_OPSHUNZ.speed
}).option('duration', {
  description: 'Animation duration.',
  alias: 'd',
  default: _constantz.TEH_DEFAULT_OPSHUNZ.duration
}).wrap(_yargs.default.terminalWidth()).strict().version().help();

async function imInUrTerminalzParsinUrArgz(parser) {
  const parsedArgz = await new Promise((keep, noKeep) => {
    parser.parse(process.argv, async (err, argv, output) => {
      return err || argv.help || argv.version ? noKeep(output) : keep(argv);
    });
  });

  const positionalArgz = parsedArgz._.slice(2);

  const urLoltext = new _makinUrText.default({ ..._constantz.TEH_DEFAULT_OPSHUNZ,
    ...parsedArgz
  });
  urLoltext.stream.pipe(process.stdout);

  if (positionalArgz.length === _constantz.none) {
    positionalArgz.push('-');
  }

  await positionalArgz.reduce(async (forDis, urArg) => {
    await forDis;

    if (urArg === '-') {
      return urLoltext.fromStream(process.stdin);
    }

    return urLoltext.fromFile(urArg);
  }, Promise.resolve());
}

var _default = (async () => {
  try {
    await imInUrTerminalzParsinUrArgz(argzParser);
  } catch (err) {
    console.error(_makinUrText.default.fromString(err.message || err));
    process.exit(1);
  }
})();

exports.default = _default;
//# sourceMappingURL=cli.js.map