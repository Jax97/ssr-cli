{"version":3,"sources":["../../src/bin/cli.ts"],"names":["argzParser","yargz","usage","join","example","option","description","alias","default","TEH_DEFAULT_OPSHUNZ","spread","freq","seed","animate","speed","duration","wrap","terminalWidth","strict","version","help","imInUrTerminalzParsinUrArgz","parser","parsedArgz","Promise","keep","noKeep","parse","process","argv","err","output","positionalArgz","_","slice","urLoltext","MakinUrText","stream","pipe","stdout","length","none","push","reduce","forDis","urArg","fromStream","stdin","fromFile","resolve","console","error","fromString","message","exit"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport yargz from 'yargs';\nimport MakinUrText from 'lib/makin-ur-text';\nimport {none, TEH_DEFAULT_OPSHUNZ} from 'etc/constantz';\nimport {idk} from 'etc/typez';\n\n\nconst argzParser = yargz\n  .usage([\n    '$0 [OPTION]... [FILE]...\\n\\n',\n    'Concatenate FILE(s) or standard input to standard output.\\n',\n    'With no FILE, or when FILE is \"-\", read standard input.'\n  ].join(''))\n  .example('$0 foo - bar', 'Output foo\\'s contents, then stdin, then, bar\\'s contents.')\n  .example('$0', 'Copy stdin to stdout.')\n  .example('cowsay \"Sindre is a horse\" | lolcatjs', 'Because why not.')\n  .option('force', {\n    description: 'Force color even when stdout is not a TTY.',\n    alias: 'f'\n  })\n  .option('spread', {\n    description: 'Rainbow spread.',\n    alias: 'p',\n    default: TEH_DEFAULT_OPSHUNZ.spread\n  })\n  .option('freq', {\n    description: 'Rainbow frequency.',\n    alias: 'F',\n    default: TEH_DEFAULT_OPSHUNZ.freq\n  })\n  .option('seed', {\n    description: 'Rainbow seed; 0 = random.',\n    alias: 'S',\n    default: TEH_DEFAULT_OPSHUNZ.seed\n  })\n  .option('animate', {\n    description: 'Enable psychedelics.',\n    alias: 'a',\n    default: TEH_DEFAULT_OPSHUNZ.animate\n  })\n  .option('speed', {\n    description: 'Animation speed.',\n    alias: 's',\n    default: TEH_DEFAULT_OPSHUNZ.speed\n  })\n  .option('duration', {\n    description: 'Animation duration.',\n    alias: 'd',\n    default: TEH_DEFAULT_OPSHUNZ.duration\n  })\n  .wrap(yargz.terminalWidth())\n  .strict()\n  .version()\n  .help();\n\n\nasync function imInUrTerminalzParsinUrArgz(parser: yargz.Argv) {\n  // Dis lets us git teh halptxt frm yargz sos we can lol-ify it.\n  const parsedArgz = await new Promise<yargz.Arguments>((keep, noKeep) => {\n    parser.parse(process.argv, async (err: Error, argv: yargz.Arguments, output: string) => {\n      return (err || argv.help || argv.version) ? noKeep(output) : keep(argv); // tslint:disable-line no-void-expression\n    });\n  });\n\n  const positionalArgz = parsedArgz._.slice(2);\n  const urLoltext = new MakinUrText({...TEH_DEFAULT_OPSHUNZ, ...parsedArgz});\n\n  urLoltext.stream.pipe(process.stdout);\n\n  if (positionalArgz.length === none) {\n    positionalArgz.push('-');\n  }\n\n  await positionalArgz.reduce(async (forDis, urArg) => {\n    await forDis;\n\n    if (urArg === '-') {\n      return urLoltext.fromStream(process.stdin);\n    }\n\n    return urLoltext.fromFile(urArg);\n  }, Promise.resolve() as Promise<idk>);\n}\n\n\nexport default (async () => {\n  try {\n    await imInUrTerminalzParsinUrArgz(argzParser);\n  } catch (err) {\n    console.error(MakinUrText.fromString(err.message || err));\n    process.exit(1);\n  }\n})();\n"],"file":"cli.js"}